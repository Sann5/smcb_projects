trans_mat = matrix(c(0.1, 0.9, 0.4, 0.6), nrow = 2, ncol = 2)
trans_mat
trans_mat = matrix(c(0.1, 0.4, 0.9, 0.6), nrow = 2, ncol = 2)
trans_mat
eigen(t(trans_mat))
eigen(trans_mat)
-0.4061385*(-0.9) + -0.9138115*0.4
eigen_decomp = eigen(t(trans_mat))
eigen_decomp$vectors[1]
eigen_decomp$vectors[,1]
## Get first column (matrix columns contain the eigenvectors) and normalize
eigen_decomp$vectors[,1] \ sum(eigen_decomp$vectors[,1])
## Get first column (matrix columns contain the eigenvectors) and normalize
eigen_decomp$vectors[,1] / sum(eigen_decomp$vectors[,1])
## Get first column (matrix columns contain the eigenvectors) and normalize
stat_dist = eigen_decomp$vectors[,1] / sum(eigen_decomp$vectors[,1])
stat_dist
## Check
t(trans_mat) %*% stat_dist
## Init distribution matrix
dist_mat = matrix(1, nrow = 2, ncol = 2)
7
## Define error
err = 1e-7
dist
dist_mat
sum(dist_mat)
## Init distribution matrix
dist_mat = t(trans_mat)
sum(dist_mat)
## Define error
err = 1e-7
## Init distribution matrix
dist_mat = t(trans_mat)
## Loop while error is larger
while (sum(dist_mat) > err) {
dist_mat = dist_mat %*% t(trans_mat)
}
dist_mat = t(trans_mat)
dist_mat %*% t(trans_mat)
## Init distribution matrix
dist_mat = t(trans_mat)
## Loop while error is larger
while (sum(dist_mat) > err) {
dist_mat = dist_mat %*% t(trans_mat)
sum(dist_mat)
}
## Define error
err = 1e-7
## Init distribution matrix
dist_mat = t(trans_mat)
## Loop while error is larger
while (sum(dist_mat) > err) {
dist_mat = dist_mat %*% t(trans_mat)
print(sum(dist_mat))
}
dist_mat %*% t(trans_mat)
t(trans_mat) %*% t(trans_mat)
t(trans_mat) - t(trans_mat)
c(stat_dist, stat_dist)
matrix(stat_dist, stat_dist, 2,2)
matrix(stat_dist, stat_dist, nrow = 2, ncol = 2)
t(stat_dist)
stat_dist
?
matrix
matrix
matrix(stat_dist, stat_dist, nrow = 2, ncol = 2, byrow = TRUE)
matrix(c(stat_dist, stat_dist), nrow = 2, ncol = 2, byrow = TRUE)
matrix(c(stat_dist, stat_dist), nrow = 2, ncol = 2, byrow = FALSE)
## Define error
err = 1e-7
## Init distribution matrix and target
dist_mat = t(trans_mat)
target = matrix(c(stat_dist, stat_dist), nrow = 2, ncol = 2, byrow = FALSE)
## Loop while error is larger
while (sum(dist_mat - target) > err) {
dist_mat = dist_mat %*% t(trans_mat)
print(sum(dist_mat))
}
## Print distribution
dist_mat
matrix(c(stat_dist, stat_dist), nrow = 2, ncol = 2, byrow = FALSE)
t(trans_mat)
## Define error
err = 1e-7
## Init distribution matrix and target
dist_mat = t(trans_mat)
target = matrix(c(stat_dist, stat_dist), nrow = 2, ncol = 2, byrow = FALSE)
## Loop while error is larger
while (sum(dist_mat - target) > err) {
dist_mat = dist_mat %*% t(trans_mat)
}
## Print distribution
dist_mat
## Define error
err = 1e-7
## Init distribution matrix and target
dist_mat = t(trans_mat)
target = matrix(c(stat_dist, stat_dist), nrow = 2, ncol = 2, byrow = FALSE)
## Loop while error is larger
while (sum(dist_mat - target) > err) {
dist_mat = dist_mat %*% t(trans_mat)
print(dist_mat)
}
## Print distribution
dist_mat
## Define error
err = 1e-7
## Init distribution matrix and target
dist_mat = t(trans_mat)
target = matrix(c(stat_dist, stat_dist), nrow = 2, ncol = 2, byrow = FALSE)
## Loop while error is larger
while (sum(dist_mat - target) > err) {
dist_mat = dist_mat %*% t(trans_mat)
print(dist_mat)
}
## Print distribution
dist_mat
## Define error
err = 1e-7
## Init distribution matrix and target
dist_mat = t(trans_mat)
target = matrix(c(stat_dist, stat_dist), nrow = 2, ncol = 2, byrow = FALSE)
## Loop while error is larger
while (sum(dist_mat - target) > err) {
dist_mat = dist_mat %*% t(trans_mat)
print(dist_mat)
}
## Print distribution
dist_mat
## Init distribution matrix and target
dist_mat = t(trans_mat)
target = matrix(c(stat_dist, stat_dist), nrow = 2, ncol = 2, byrow = FALSE)
## Loop while error is larger
while (sum(dist_mat - target) > err) {
dist_mat = dist_mat %*% t(trans_mat)
print(dist_mat)
}
dist_mat - target
sum(dist_mat - target)
target
abs(dist_mat - target)
## Define error
err = 1e-7
## Init distribution matrix and target
dist_mat = t(trans_mat)
target = matrix(c(stat_dist, stat_dist), nrow = 2, ncol = 2, byrow = FALSE)
## Loop while error is larger
while (sum(abs(dist_mat - target)) > err) {
dist_mat = dist_mat %*% t(trans_mat)
}
## Print distribution
dist_mat
## Define error
err = 1e-7
## Init distribution matrix, target counter
dist_mat = t(trans_mat)
target = matrix(c(stat_dist, stat_dist), nrow = 2, ncol = 2, byrow = FALSE)
n = 0
## Loop while error is larger
while (sum(abs(dist_mat - target)) > err) {
dist_mat = dist_mat %*% t(trans_mat)
n = n + 1
}
## Print distribution and power
dist_mat
n
library(tidyverse)
# read the data into D
Train_data <- read.table("./data/proteins_train.tsv",col.names=c("ProtName","AminoAcids","KnownPath"))
# read the data into D
Test_data <- read.table("./data/proteins_test.tsv",col.names=c("ProtName","AminoAcids","KnownPath") )
# read the data into D
New_data <- read.table("./data/proteins_new.tsv",col.names=c("ProtName","AminoAcids"))
Train_data
New_data
Test_data
#characters
unique.ss <- c("B", "C", "E", "G", "H", "I", "S", "T")
unique.aa <- c("A", "C", "D", "E", "F", "G", "H", "I",
"K", "L", "M", "N", "P", "Q", "R", "S",
"T", "U", "V", "W", "X", "Y")
Get_Parameters<-function(Train_data,unique.ss,unique.aa){
# Vector of initial state probabilities
I<-vector()
for(i in unique.ss) {I<-c(I,(sum(str_count(substr(Train_data$KnownPath,1,1),i))/nrow(Train_data)))}
# Matrix of transition probabilities
Tr<- matrix(0,length(unique.ss),length(unique.ss))
for (i in 1:(nrow(Train_data))){
for(j in 1:(nchar(Train_data$KnownPath[i])-1)){
from=which(unique.ss == substr(Train_data$KnownPath[i], j, j))
to=which(unique.ss == substr(Train_data$KnownPath[i], j+1, j+1))
Tr[from,to]=Tr[from,to]+1
}
}
Tr<-sweep(Tr, 1, rowSums(Tr), FUN = '/')
# Matrix for emission probabilities
E<- matrix(0,length(unique.ss),length(unique.aa))
for (i in 1:(nrow(Train_data))){
for(j in 1:(nchar(Train_data$KnownPath[i]))){
aa=which(unique.aa == substr(Train_data$AminoAcids[i], j, j))
ss=which(unique.ss == substr(Train_data$KnownPath[i], j, j))
E[ss,aa]=E[ss,aa]+1
}
}
E<-sweep(E, 1, rowSums(E), FUN = '/')
params<-list(I=I,Tr=Tr,E=E)
return(params)
}
#Call function and get parameters
varnamess<-"KnownPath"
params<-Get_Parameters(Train_data,unique.ss,unique.aa)
I=params$I
Tr=params$Tr
E=params$E
I
Tr
E
sumRows(Tr)
rowSums(Tr)
rowSums(E)
I
View(Train_data)
#Solving eigenvalue problem
library(expm)
# Get the eigenvectors of P, note: R returns right eigenvectors
r=eigen(Tr)
rvec=r$vectors
# left eigenvectors are the inverse of the right eigenvectors
lvec=ginv(r$vectors)
#Solving eigenvalue problem
library(expm)
# Get the eigenvectors of P, note: R returns right eigenvectors
r=eigen(Tr)
rvec=r$vectors
# left eigenvectors are the inverse of the right eigenvectors
lvec=ginv(r$vectors)
?ginv
??ginv
library(MASS)
# left eigenvectors are the inverse of the right eigenvectors
lvec=ginv(r$vectors)
#Solving eigenvalue problem
library(expm)
library(MASS)
# Get the eigenvectors of P, note: R returns right eigenvectors
r=eigen(Tr)
rvec=r$vectors
# left eigenvectors are the inverse of the right eigenvectors
lvec=ginv(r$vectors)
# The eigenvalues
lam<-r$values
pi_eig<-lvec[1,]/sum(lvec[1,])
pi_eig
#Brute-force approach
pi_bru <- (Tr %^% 1000)[1,]
pi_bru
#Is Stationary distribution of The two approaches the same?
all.equal(pi_bru,pi_eig)
viterbi <- function(E, Tr, I, p) {
.as.array <- function(.) stringr::str_split(., "")[[1]]
unique.ss <- c("B", "C", "E", "G", "H", "I", "S", "T")
unique.aa <- c("A", "C", "D", "E", "F", "G", "H", "I",
"K", "L", "M", "N", "P", "Q", "R", "S",
"T", "U", "V", "W", "X", "Y")
for (k in seq(nrow(p))) {
sequence <- p$AminoAcids[k]
aa.vec <- .as.array(sequence) %>% match(unique.aa)
P      <- matrix(0, nrow(E), length(aa.vec))
Ptr    <- matrix(0, nrow(E), length(aa.vec))
## sets the paths
for (i in seq(length(aa.vec))) {
if (i == 1) {
P[, i] <- I + E[, aa.vec[i]]
} else {
for (j in seq(nrow(E))) {
p.loc    <- P[, i - 1] + Tr[, j] + E[j, aa.vec[i]]
P[j, i] <- max(p.loc)
Ptr[j, i] <- which.max(p.loc)
}
}
}
## backtrace: computes the most likely path
Phi <- vector(mode="integer",   length=length(aa.vec))
Phi[length(Phi)] <- which.max(P[, ncol(P)])
## we start at the back, just as with Needleman-Wunsch or Smith-Waterman
for (i in seq(from=length(aa.vec), to=2)) {
Phi[i - 1] <- Ptr[Phi[i], i]
}
states <- unique.ss[Phi]
p$PredictedStructure[k] <- paste(states, collapse="")
}
return(p)
}
PNew_data<-viterbi(E, Tr, I, New_data)
PTest_data<-viterbi(E, Tr, I, Test_data)
write.table(PNew_data, file='proteins_new_pedicted.tsv', quote=FALSE, sep='\t')
#TAKES A WHILE TO RUN
## Bootstrapping
set.seed(0)
library(boot)
#Number of bootstraps
nbst<-1000
#Resample the Parameters
resamples<-lapply(1:nbst,function(x)
Get_Parameters(Train_data[sample(nrow(Train_data),replace = TRUE),],unique.ss,unique.aa)
);
#TAKES A WHILE TO RUN
## Bootstrapping
set.seed(0)
library(boot)
#Number of bootstraps
nbst<-1000
#Resample the Parameters
resamples<-lapply(1:nbst,function(x)
Get_Parameters(Train_data[sample(nrow(Train_data),replace = TRUE),],unique.ss,unique.aa)
);
