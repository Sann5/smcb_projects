library(tidyverse)
library(vroom)
# read the data into D
D <- vroom("./coinflip.csv")
# read the data into D
D <- vroom("./coinflip.csv", show_col_types = FALSE)
# check the dimension of D
all(dim(D) == c(200, 100))
?runif
runif(2)
# Number of coins
k <- 2
# Mixture weights (a vector of length k)
lambda <- c(0.5, 0.5)
# Probabilities of obtaining heads (a vector of length k)
theta <- runif(k)
theta
matrix(0, nrow = k, ncol = 200
)
matrix(0, nrow = k, ncol = 200)
View(D)
?apply
apply(D, 1, sum)
choose(100, apply(D, 1, sum))
lambda[1] * choose(100, apply(D, 1, sum))
theta[1]^apply(D, 1, sum)
theta[1]
lambda[1] * choose(100, apply(D, 1, sum)) * theta[1]^apply(D, 1, sum) * (1-theta[1])^apply(D, 1, sum)
gamma[1, ]
gamma <- matrix(0, nrow = k, ncol = N)
gamma <- matrix(0, nrow = k, ncol = 200)
gamma[1, ]
a <- lambda[1] * choose(100, apply(D, 1, sum)) * theta[1]^apply(D, 1, sum) * (1-theta[1])^apply(D, 1, sum)
b <- lambda[2] * choose(100, apply(D, 1, sum)) * theta[2]^apply(D, 1, sum) * (1-theta[2])^apply(D, 1, sum)
gamma[1, ] <- a/(a + b)
gamma[2, ] <- 1- gamma[1, ]
gamma
theta
# Probabilities of obtaining heads (a vector of length k)
theta <- runif(k)
theta <- runif(k)
theta
a <- lambda[1] * choose(100, apply(D, 1, sum)) * theta[1]^apply(D, 1, sum) * (1-theta[1])^apply(D, 1, sum)
b <- lambda[2] * choose(100, apply(D, 1, sum)) * theta[2]^apply(D, 1, sum) * (1-theta[2])^apply(D, 1, sum)
gamma[1, ] <- a/(a + b)
gamma[2, ] <- 1- gamma[1, ]
gamma
a <- lambda[1] * choose(100, apply(D, 1, sum)) * theta[1]^apply(D, 1, sum) * (1-theta[1])^(100 - apply(D, 1, sum))
b <- lambda[2] * choose(100, apply(D, 1, sum)) * theta[2]^apply(D, 1, sum) * (1-theta[2])^(100 - apply(D, 1, sum))
gamma[1, ] <- a/(a + b)
gamma[2, ] <- 1- gamma[1, ]
gamma
View(gamma)
theta
apply(D, 1, sum)
binom_coef <- choose(100, apply(D, 1, sum))
n_heads <- apply(D, 1, sum)
n_tails <- 100 - n_heads
a <- lambda[1] * binom_coef * theta[1]^n_heads * (1-theta[1])^n_tails)
binom_coef <- choose(100, apply(D, 1, sum))
n_heads <- apply(D, 1, sum)
n_tails <- 100 - n_heads
a <- lambda[1] * binom_coef * theta[1]^n_heads * (1-theta[1])^n_tails
b <- lambda[2] * binom_coef * theta[2]^n_heads * (1-theta[2])^n_tails
gamma[1, ] <- a/(a + b)
gamma[2, ] <- 1 - gamma[1, ]
theta[2]^n_heads
theta[1]^n_heads
(1-theta[1])^n_tails
(1-theta[2])^n_tails
binom_coef
lambda[1]
theta[1]
theta[2]
gamma[1, ]
lambda[1] * binom_coef
?choose
?choose
?pbinom(k, n, p)
pbinom(apply(D, 1, sum), 100, theta[1])
a <- lambda[1] * pbinom(apply(D, 1, sum), 100, theta[1])
b <- lambda[2] * pbinom(apply(D, 1, sum), 100, theta[2])
gamma[1, ] <- a/(a + b)
gamma[2, ] <- 1 - gamma[1, ]
pbinom(apply(D, 1, sum), 100, theta[1])
pbinom(apply(D, 1, sum), 100, theta[2])
theta[2]
pbinom(apply(D, 1, sum), 100, theta[2])
pbinom(apply(D, 1, sum), 100, theta[1])
theta <- c(0.5, 0.5)
a <- lambda[1] * pbinom(apply(D, 1, sum), 100, theta[1])
b <- lambda[2] * pbinom(apply(D, 1, sum), 100, theta[2])
gamma[1, ] <- a/(a + b)
gamma[2, ] <- 1 - gamma[1, ]
# Probabilities of obtaining heads (a vector of length k)
theta <- runif(k)
theta
# Probabilities of obtaining heads (a vector of length k)
theta <- runif(k)
theta
# Probabilities of obtaining heads (a vector of length k)
theta <- runif(k)
theta
theta <- runif(k)
theta
a <- lambda[1] * pbinom(apply(D, 1, sum), 100, theta[1])
b <- lambda[2] * pbinom(apply(D, 1, sum), 100, theta[2])
gamma[1, ] <- a/(a + b)
gamma[2, ] <- 1 - gamma[1, ]
theta <- c(0.6, 0.6)
a <- lambda[1] * pbinom(apply(D, 1, sum), 100, theta[1])
b <- lambda[2] * pbinom(apply(D, 1, sum), 100, theta[2])
gamma[1, ] <- a/(a + b)
gamma[2, ] <- 1 - gamma[1, ]
# Probabilities of obtaining heads (a vector of length k)
theta <- runif(k)
theta
a <- lambda[1] * pbinom(apply(D, 1, sum), 100, theta[1])
b <- lambda[2] * pbinom(apply(D, 1, sum), 100, theta[2])
gamma[1, ] <- a/(a + b)
gamma[2, ] <- 1 - gamma[1, ]
gamma[2, ] <- b/(a + b)
?any
?all
all(gamma[1, ] > gamma[2, ])
thata <- c (0.6161062, 0.5539471)
a <- lambda[1] * pbinom(apply(D, 1, sum), 100, theta[1])
b <- lambda[2] * pbinom(apply(D, 1, sum), 100, theta[2])
gamma[1, ] <- a/(a + b)
gamma[2, ] <- b/(a + b)
theta <- c(0.1, 0.5)
a <- lambda[1] * pbinom(apply(D, 1, sum), 100, theta[1])
b <- lambda[2] * pbinom(apply(D, 1, sum), 100, theta[2])
gamma[1, ] <- a/(a + b)
gamma[2, ] <- b/(a + b)
lambda[2] * pbinom(apply(D, 1, sum), 100, theta[2])
lambda[1] * pbinom(apply(D, 1, sum), 100, theta[1])
theta
a/(a + b)
a
b
pbinom(apply(D, 1, sum), 100, theta[1])
theta[1]
pbinom
?pbinom
apply(D, 1, sum)
pbinom(50, 100, 0.5)
qbinom(50, 100, 0.5)
dbinom(5, 10, 0.5)
dbinom(1, 1, 1)
dbinom(5, 10, 1)
dbinom(5, 10, 0.5)
lambda
theta
a <- lambda[1] * dbinom(apply(D, 1, sum), 100, theta[1])
b <- lambda[2] * dbinom(apply(D, 1, sum), 100, theta[2])
gamma[1, ] <- a/(a + b)
gamma[2, ] <- b/(a + b)
# Probabilities of obtaining heads (a vector of length k)
theta <- runif(k)
theta
a <- lambda[1] * dbinom(apply(D, 1, sum), 100, theta[1])
b <- lambda[2] * dbinom(apply(D, 1, sum), 100, theta[2])
gamma[1, ] <- a/(a + b)
gamma[2, ] <- b/(a + b)
