library(tidyverse)
library(vroom)
library(BiDAG)
library(graph)
## Set seed
set.seed(2022)
## Read data
data <- vroom(file = "sachs.data.txt", show_col_types = FALSE)
## Visualize data dimensions.
dim(data)
## Set seed
set.seed(2022)
## Read and index data
data <- vroom(file = "sachs.data.txt", show_col_types = FALSE)
data = data %>% rowid_to_column(var = 'row_id')
## Visualize data dimensions.
dim(data)
## Function for average BGe score and number of edges
avg_BGe_score_and_n_edges <- function(am) {
## Init objects to keep track of BGe score and number of edges
n_edges = c()
BGe_scores = c()
for (i in 1:10) {
## Split data
train = data %>% sample_frac(0.8, replace = FALSE)
test = anti_join(data, train, by = "row_id")
## Remove id column used for splitting
train = train %>% select(-row_id)
test = test %>% select(-row_id)
## Initializing score objects
score_object_train = scoreparameters(scoretype = 'bge',
train,
bgepar = list(am = am, aw = NULL))
score_object_test = scoreparameters(scoretype = 'bge',
test,
bgepar = list(am = am, aw = NULL))
## Infer network on train data
infered_network = orderMCMC(score_object_train)
## Append number of edges of the inferred network
n_edges = c(n_edges, sum(infered_network$DAG))
## Append BGe score
BGe_scores = c(BGe_scores, DAGscore(score_object_test,
infered_network$DAG))
}
## Return mean number of edges and mean BGe score
return(list("mean_n_edges" = mean(n_edges), "mean_BGe_score" = mean(BGe_scores)))
}
avg_BGe_score_and_n_edges(1)
install.packages("parallel")
install.packages("parallel")
library(parallel)
c(10e−5, 10e−3, 10e−1, 10, 10e2)
c(10e-5, 10e-3, 10e-1, 10, 10e2)
## Create list of alpha mu values (am values)
am_values = c(10e-5, 10e-3, 10e-1, 10, 10e2)
## Run the each average pair (for each am value) on parallel
results = mclapply(X = am_values,
FUN = avg_BGe_score_and_n_edges,
mc.cores = 5,
mc.preschedule = FALSE)
## Create list of alpha mu values (am values)
am_values = list(10e-5, 10e-3, 10e-1, 10, 10e2)
am_values
## Run the each average pair (for each am value) on parallel
results = mclapply(X = am_values,
FUN = avg_BGe_score_and_n_edges,
mc.cores = 5,
mc.preschedule = FALSE)
results
library(parallel)
## Run the each average pair (for each am value) on parallel
results = mclapply(X = am_values,
FUN = avg_BGe_score_and_n_edges,
mc.cores = 5,
mc.preschedule = FALSE)
results
## Define function for average BGe score and average number of edges
avg_BGe_score_and_n_edges <- function(am, data) {
## Init objects to keep track of BGe score and number of edges
n_edges = c()
BGe_scores = c()
for (i in 1:10) {
## Split data
train = data %>% sample_frac(0.8, replace = FALSE)
test = anti_join(data, train, by = "row_id")
## Remove id column used for splitting
train = train %>% select(-row_id)
test = test %>% select(-row_id)
## Initializing score objects
score_object_train = scoreparameters(scoretype = 'bge',
train,
bgepar = list(am = am, aw = NULL))
score_object_test = scoreparameters(scoretype = 'bge',
test,
bgepar = list(am = am, aw = NULL))
## Infer network on train data
infered_network = orderMCMC(score_object_train)
## Append number of edges of the inferred network
n_edges = c(n_edges, sum(infered_network$DAG))
## Append BGe score
BGe_scores = c(BGe_scores, DAGscore(score_object_test,
infered_network$DAG))
}
## Return mean number of edges and mean BGe score
return(list("mean_n_edges" = mean(n_edges),
"mean_BGe_score" = mean(BGe_scores)))
}
## Create list of alpha mu values (am values)
am_values = list(c(10e-5, data),
c(10e-3, data),
c(10e-1, data),
c(10, data),
c(10e2, data))
## Run the each average pair (for each am value) on parallel
results = mclapply(X = am_values,
FUN = avg_BGe_score_and_n_edges,
mc.cores = 5,
mc.preschedule = FALSE)
results
library(dplyr)
## Run the each average pair (for each am value) on parallel
results = mclapply(X = am_values,
FUN = avg_BGe_score_and_n_edges,
mc.cores = 5,
mc.preschedule = FALSE)
?sample_frac
## Create list of alpha mu values (am values)
am_values = list(10e-5, 10e-3, 10e-1, 10, 10e2)
## Define function for average BGe score and average number of edges
avg_BGe_score_and_n_edges <- function(am, data) {
## Init objects to keep track of BGe score and number of edges
n_edges = c()
BGe_scores = c()
for (i in 1:10) {
## Split data
train = sample_frac(data, 0.8, replace = FALSE)
test = anti_join(data, train, by = "row_id")
## Remove id column used for splitting
train = train %>% select(-row_id)
test = test %>% select(-row_id)
## Initializing score objects
score_object_train = scoreparameters(scoretype = 'bge',
train,
bgepar = list(am = am, aw = NULL))
score_object_test = scoreparameters(scoretype = 'bge',
test,
bgepar = list(am = am, aw = NULL))
## Infer network on train data
infered_network = orderMCMC(score_object_train)
## Append number of edges of the inferred network
n_edges = c(n_edges, sum(infered_network$DAG))
## Append BGe score
BGe_scores = c(BGe_scores, DAGscore(score_object_test,
infered_network$DAG))
}
## Return mean number of edges and mean BGe score
return(list("mean_n_edges" = mean(n_edges),
"mean_BGe_score" = mean(BGe_scores)))
}
## Run the each average pair (for each am value) on parallel
results = mclapply(X = am_values,
FUN = avg_BGe_score_and_n_edges,
mc.cores = 5,
mc.preschedule = FALSE)
results
## Define function for average BGe score and average number of edges
avg_BGe_score_and_n_edges <- function(am) {
## Init objects to keep track of BGe score and number of edges
n_edges = c()
BGe_scores = c()
for (i in 1:10) {
## Split data
train = sample_frac(data, 0.8, replace = FALSE)
test = anti_join(data, train, by = "row_id")
## Remove id column used for splitting
train = train %>% select(-row_id)
test = test %>% select(-row_id)
## Initializing score objects
score_object_train = scoreparameters(scoretype = 'bge',
train,
bgepar = list(am = am, aw = NULL))
score_object_test = scoreparameters(scoretype = 'bge',
test,
bgepar = list(am = am, aw = NULL))
## Infer network on train data
infered_network = orderMCMC(score_object_train)
## Append number of edges of the inferred network
n_edges = c(n_edges, sum(infered_network$DAG))
## Append BGe score
BGe_scores = c(BGe_scores, DAGscore(score_object_test,
infered_network$DAG))
}
## Return mean number of edges and mean BGe score
return(list("mean_n_edges" = mean(n_edges),
"mean_BGe_score" = mean(BGe_scores)))
}
## Create list of alpha mu values (am values)
am_values = list(10e-5, 10e-3, 10e-1, 10, 10e2)
## Run the each average pair (for each am value) on parallel
results = mclapply(X = am_values,
FUN = avg_BGe_score_and_n_edges,
mc.cores = 5,
mc.preschedule = FALSE)
results
## Define function for average BGe score and average number of edges
avg_BGe_score_and_n_edges <- function(am) {
library(BiDAG)
## Init objects to keep track of BGe score and number of edges
n_edges = c()
BGe_scores = c()
for (i in 1:10) {
## Split data
train = sample_frac(data, 0.8, replace = FALSE)
test = anti_join(data, train, by = "row_id")
## Remove id column used for splitting
train = train %>% select(-row_id)
test = test %>% select(-row_id)
## Initializing score objects
score_object_train = scoreparameters(scoretype = 'bge',
train,
bgepar = list(am = am, aw = NULL))
score_object_test = scoreparameters(scoretype = 'bge',
test,
bgepar = list(am = am, aw = NULL))
## Infer network on train data
infered_network = orderMCMC(score_object_train)
## Append number of edges of the inferred network
n_edges = c(n_edges, sum(infered_network$DAG))
## Append BGe score
BGe_scores = c(BGe_scores, DAGscore(score_object_test,
infered_network$DAG))
}
## Return mean number of edges and mean BGe score
return(list("mean_n_edges" = mean(n_edges),
"mean_BGe_score" = mean(BGe_scores)))
}
## Create list of alpha mu values (am values)
am_values = list(10e-5, 10e-3, 10e-1, 10, 10e2)
## Run the each average pair (for each am value) on parallel
results = mclapply(X = am_values,
FUN = avg_BGe_score_and_n_edges,
mc.cores = 5,
mc.preschedule = FALSE)
results
## Define function for average BGe score and average number of edges
avg_BGe_score_and_n_edges <- function(am) {
## Have to load libraries inside the function otherwise it can not find other
## functions even if they are alredy loaded.
library(BiDAG)
library(dplyr)
## Init objects to keep track of BGe score and number of edges
n_edges = c()
BGe_scores = c()
for (i in 1:10) {
## Split data
train = data %>% sample_frac(0.8, replace = FALSE)
test = anti_join(data, train, by = "row_id")
## Remove id column used for splitting
train = train %>% select(-row_id)
test = test %>% select(-row_id)
## Initializing score objects
score_object_train = scoreparameters(scoretype = 'bge',
train,
bgepar = list(am = am, aw = NULL))
score_object_test = scoreparameters(scoretype = 'bge',
test,
bgepar = list(am = am, aw = NULL))
## Infer network on train data
infered_network = orderMCMC(score_object_train)
## Append number of edges of the inferred network
n_edges = c(n_edges, sum(infered_network$DAG))
## Append BGe score
BGe_scores = c(BGe_scores, DAGscore(score_object_test,
infered_network$DAG))
}
## Return mean number of edges and mean BGe score
return(list("mean_n_edges" = mean(n_edges),
"mean_BGe_score" = mean(BGe_scores)))
}
## Create list of alpha mu values (am values)
am_values = list(10e-5, 10e-3, 10e-1, 10, 10e2)
## Run the each average pair (for each am value) on parallel
results = mclapply(X = am_values,
FUN = avg_BGe_score_and_n_edges,
mc.cores = 5,
mc.preschedule = FALSE)
results
as_tibble(results)
results
unlist(results)
unlist(results) %>% as_tibble()
unlist(results)
results
%>% as_tibble()
unlist(results) %>% as_tibble()
unlist(results) %>% as_data_frame()
unlist(results)
matrix(unlist(unlist(results))
matrix(unlist(unlist(results))
matrix(unlist(results))
do.call(rbind, results)
do.call(rbind, results) %>% as_tibble()
do.call(rbind, results)
do.call(rbind, results) %>% as_data_frame()
do.call(rbind, results)
do.call(rbind, results) %>% typeof()
do.call(rbind, results) %>% unlist()
do.call(rbind, results)
## Define function for average BGe score and average number of edges
avg_BGe_score_and_n_edges <- function(am) {
## Have to load libraries inside the function otherwise it can not find other
## functions even if they are alredy loaded.
library(BiDAG)
library(dplyr)
## Init objects to keep track of BGe score and number of edges
n_edges = c()
BGe_scores = c()
for (i in 1:10) {
## Split data
train = data %>% sample_frac(0.8, replace = FALSE)
test = anti_join(data, train, by = "row_id")
## Remove id column used for splitting
train = train %>% select(-row_id)
test = test %>% select(-row_id)
## Initializing score objects
score_object_train = scoreparameters(scoretype = 'bge',
train,
bgepar = list(am = am, aw = NULL))
score_object_test = scoreparameters(scoretype = 'bge',
test,
bgepar = list(am = am, aw = NULL))
## Infer network on train data
infered_network = orderMCMC(score_object_train)
## Append number of edges of the inferred network
n_edges = c(n_edges, sum(infered_network$DAG))
## Append BGe score
BGe_scores = c(BGe_scores, DAGscore(score_object_test,
infered_network$DAG))
}
## Return mean number of edges and mean BGe score
return(list("am_value" = am,
"mean_n_edges" = mean(n_edges),
"mean_BGe_score" = mean(BGe_scores)))
}
## Create list of alpha mu values (am values)
am_values = list(10e-5, 10e-3, 10e-1, 10, 10e2)
## Run the each average pair (for each am value) on parallel
results = mclapply(X = am_values,
FUN = avg_BGe_score_and_n_edges,
mc.cores = 5,
mc.preschedule = FALSE)
do.call(rbind, results)
## Plot relearned DAG with whole data set
## Initializing score objects
score_object_data = scoreparameters(scoretype = 'bge',
data %>% select(-row_id),
bgepar = list(am = 1, aw = NULL))
library(BiDAG)
score_object_data = scoreparameters(scoretype = 'bge',
data %>% select(-row_id),
bgepar = list(am = 1, aw = NULL))
## Infer network on train data
infered_network = orderMCMC(score_object_data)
## Construct graph object with the inferred network
graph_object = graphAM(adjMat = infered_network$DAG,
edgemode='directed',
values=NA)
library(tidyverse)
library(vroom)
library(BiDAG)
library(graph)
library(parallel)
## Initializing score objects
score_object_data = scoreparameters(scoretype = 'bge',
data %>% select(-row_id),
bgepar = list(am = 1, aw = NULL))
## Infer network on train data
infered_network = orderMCMC(score_object_data)
## Construct graph object with the inferred network
graph_object = graphAM(adjMat = infered_network$DAG,
edgemode='directed',
values=NA)
## Plot graph
plot(graph_object)
