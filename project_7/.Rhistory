#Construct a sparse graph
m<-matrix(rbinom(100,1,1.5/9),10)
diag(m)<-0
g<-network(m)
#Plot the graph
plot(g)
#Load Padgett's marriage data
data(flo)
nflo<-network(flo)
#Display the network, indicating degree and flagging the Medicis
plot(nflo, vertex.cex=apply(flo,2,sum)+1, usearrows=FALSE,
vertex.sides=3+apply(flo,2,sum),
vertex.col=2+(network.vertex.names(nflo)=="Medici"))
m<-matrix(rbinom(100,1,1.5/9),10)
diag(m)<-0
g<-network(m)
#Plot the graph
plot(g)
library(network)
install.packages("network")
m<-matrix(rbinom(100,1,1.5/9),10)
diag(m)<-0
g<-network(m)
#Plot the graph
plot(g)
library(network)
m<-matrix(rbinom(100,1,1.5/9),10)
diag(m)<-0
g<-network(m)
#Plot the graph
plot(g)
library(BiDAG)
library(graph)
matrix(1, ncol = 10, nrow = 20)
matrix(1, ncol = 10, nrow = 10)
A:J
seq(a:j)
LETTERS[seq( from = 1, to = 10 )]
adj_mat = matrix(1, ncol = 10, nrow = 10)
rownames(adj_mat) = LETTERS[seq( from = 1, to = 10 )]
colnames(adj_mat) = LETTERS[seq( from = 1, to = 10 )]
adj_mat
?matrix
matrix(1, ncol = 10, nrow = 10, dimnames = c(LETTERS[seq( from = 1, to = 10 )], LETTERS[seq( from = 1, to = 10 )]))
matrix(1, ncol = 10, nrow = 10, dimnames = list(LETTERS[seq( from = 1, to = 10 )], LETTERS[seq( from = 1, to = 10 )]))
lower.tri(adj_mat)
knitr::opts_chunk$set(echo = TRUE)
adj_mat = matrix(1,
ncol = 10,
nrow = 10,
dimnames = list(LETTERS[seq( from = 1, to = 10 )],
LETTERS[seq( from = 1, to = 10 )]))
lower.tri(adj_mat) = 0
lower.tri(adj_mat)
lower.tri(adj_mat)
?lower.tri
adj_mat = matrix(1,
ncol = 10,
nrow = 10,
dimnames = list(LETTERS[seq( from = 1, to = 10 )],
LETTERS[seq( from = 1, to = 10 )]))
adj_mat[lower.tri(adj_mat, diag = TRUE)] = 0
adj_mat
adj_mat[A, B]
adj_mat[0,0]
adj_mat[0,2]
adj_mat[1:2, 1:2]
adj_mat[1, 1]
adj_mat[1, :]
adj_mat[1, ]
adj_mat = matrix(1,
ncol = 10,
nrow = 10,
dimnames = list(LETTERS[seq( from = 1, to = 10 )],
LETTERS[seq( from = 1, to = 10 )]))
adj_mat[lower.tri(adj_mat, diag = TRUE)] = 0
## Changing A
adj_mat[1, ] = c(0,1,1,0,0,0,0,0,0,0)
adj_mat
adj_mat = matrix(1,
ncol = 10,
nrow = 10,
dimnames = list(LETTERS[seq( from = 1, to = 10 )],
LETTERS[seq( from = 1, to = 10 )]))
adj_mat[lower.tri(adj_mat, diag = TRUE)] = 0
## Changing A
adj_mat[1, ] = c(0,1,1,0,0,0,0,0,0,0)
## Changing B
adj_mat[2, ] = c(1,0,1,0,0,0,0,0,0,0)
## Changing C
adj_mat[3, ] = c(1,1,0,0,0,0,0,0,0,0)
## Changing D
adj_mat[4, ] = c(0,0,1,0,1,0,0,0,0,0)
## Changing E
adj_mat[5, ] = c(0,0,1,0,1,1,0,0,0,0)
## Changing F
adj_mat[6, ] = c(0,0,1,1,1,0,1,0,1,0)
## Changing G
adj_mat[7, ] = c(0,0,0,0,1,1,0,1,0,0)
## Changing H
adj_mat[8, ] = c(0,0,0,0,0,0,1,0,0,0)
## Changing I
adj_mat[9, ] = c(0,0,0,0,0,0,0,0,1,0)
## Changing J
adj_mat[10, ] = c(0,0,0,0,0,0,0,0,1,0)
adj_mat
g = network(adj_mat, directed = FALSE)
plot(g)
g = graphAM(adj_mat, directed = FALSE)
g = graphAM(adjMat = adj_mat, edgemode = 'undirected')
adj_mat
adj_mat = matrix(1,
ncol = 11,
nrow = 11,
dimnames = list(LETTERS[seq( from = 1, to = 11 )],
LETTERS[seq( from = 1, to = 11 )]))
adj_mat[lower.tri(adj_mat, diag = TRUE)] = 0
## Changing A
adj_mat[1, ] = c(0,1,1,0,0,0,0,0,0,0,0)
## Changing B
adj_mat[2, ] = c(1,0,1,0,0,0,0,0,0,0,0)
## Changing C
adj_mat[3, ] = c(1,1,0,0,0,0,0,0,0,0,0)
## Changing D
adj_mat[4, ] = c(0,0,1,0,1,0,0,0,0,0,0)
## Changing E
adj_mat[5, ] = c(0,0,1,0,1,1,0,0,0,0,0)
## Changing F
adj_mat[6, ] = c(0,0,1,1,1,0,1,0,1,0,0)
## Changing G
adj_mat[7, ] = c(0,0,0,0,1,1,0,1,0,0,0)
## Changing H
adj_mat[8, ] = c(0,0,0,0,0,0,1,0,0,0,0)
## Changing I
adj_mat[9, ] = c(0,0,0,0,0,0,0,0,1,0,0)
## Changing J
adj_mat[10, ] = c(0,0,0,0,0,0,0,0,1,0,0)
## Changing K
adj_mat[10, ] = c(0,0,0,0,0,0,0,0,1,0,0)
g = graphAM(adjMat = adj_mat, edgemode = 'undirected')
adj_mat
## Changing D
adj_mat[4, ] = c(0,0,1,0,1,1,0,0,0,0,0)
## Changing D
adj_mat
## Changing E
adj_mat[5, ] = c(0,0,0,1,0,1,1,0,0,0,0)
## Changing I
adj_mat[9, ] = c(0,0,0,0,0,1,0,0,0,1,1)
adj_mat
## Changing J
adj_mat[10, ] = c(0,0,0,0,0,0,0,0,1,0,0)
## Changing K
adj_mat[11, ] = c(0,0,0,0,0,0,0,0,1,0,0)
adj_mat = matrix(1,
ncol = 11,
nrow = 11,
dimnames = list(LETTERS[seq( from = 1, to = 11 )],
LETTERS[seq( from = 1, to = 11 )]))
adj_mat[lower.tri(adj_mat, diag = TRUE)] = 0
## Changing A
adj_mat[1, ] = c(0,1,1,0,0,0,0,0,0,0,0)
## Changing B
adj_mat[2, ] = c(1,0,1,0,0,0,0,0,0,0,0)
## Changing C
adj_mat[3, ] = c(1,1,0,0,0,0,0,0,0,0,0)
## Changing D
adj_mat[4, ] = c(0,0,1,0,1,1,0,0,0,0,0)
## Changing E
adj_mat[5, ] = c(0,0,0,1,0,1,1,0,0,0,0)
## Changing F
adj_mat[6, ] = c(0,0,1,1,1,0,1,0,1,0,0)
## Changing G
adj_mat[7, ] = c(0,0,0,0,1,1,0,1,0,0,0)
## Changing H
adj_mat[8, ] = c(0,0,0,0,0,0,1,0,0,0,0)
## Changing I
adj_mat[9, ] = c(0,0,0,0,0,1,0,0,0,1,1)
## Changing J
adj_mat[10, ] = c(0,0,0,0,0,0,0,0,1,0,0)
## Changing K
adj_mat[11, ] = c(0,0,0,0,0,0,0,0,1,0,0)
g = graphAM(adjMat = adj_mat, edgemode = 'undirected')
adj_mat
## Changing C
adj_mat[3, ] = c(1,1,0,1,0,1,0,0,0,0,0)
adj_mat
adj_mat = matrix(1,
ncol = 11,
nrow = 11,
dimnames = list(LETTERS[seq( from = 1, to = 11 )],
LETTERS[seq( from = 1, to = 11 )]))
adj_mat[lower.tri(adj_mat, diag = TRUE)] = 0
## Changing A
adj_mat[1, ] = c(0,1,1,0,0,0,0,0,0,0,0)
## Changing B
adj_mat[2, ] = c(1,0,1,0,0,0,0,0,0,0,0)
## Changing C
adj_mat[3, ] = c(1,1,0,1,0,1,0,0,0,0,0)
## Changing D
adj_mat[4, ] = c(0,0,1,0,1,1,0,0,0,0,0)
## Changing E
adj_mat[5, ] = c(0,0,0,1,0,1,1,0,0,0,0)
## Changing F
adj_mat[6, ] = c(0,0,1,1,1,0,1,0,1,0,0)
## Changing G
adj_mat[7, ] = c(0,0,0,0,1,1,0,1,0,0,0)
## Changing H
adj_mat[8, ] = c(0,0,0,0,0,0,1,0,0,0,0)
## Changing I
adj_mat[9, ] = c(0,0,0,0,0,1,0,0,0,1,1)
## Changing J
adj_mat[10, ] = c(0,0,0,0,0,0,0,0,1,0,0)
## Changing K
adj_mat[11, ] = c(0,0,0,0,0,0,0,0,1,0,0)
g = graphAM(adjMat = adj_mat, edgemode = 'undirected')
plot(g)
c(1, 2)*c(3,4)
X1 = c(1/3,2/3)
X2 = c(4/5,2/3)
X3 = c(5/7,1/3)
X4 = c(3/5,2/5)
X5 = c(1/2,7/9)
c(1-X2,X2)*c(1-X1,X1)
c(1-X2,X2)
c(1-X2,X2)
c(1-X1,X1)
0.1333333*0.6666667
