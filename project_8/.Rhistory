knitr::opts_chunk$set(echo = TRUE)
phi1 = t(array(c(c(1,0,1,1,1),
c(0,1,0,0,1),
c(0,0,1,1,1),
c(0,0,0,1,1),
c(0,0,0,0,1)),
dim = c(5, 5), dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("S1", "S2", "S3", "S4", "S5"))))
phi2 = t(array(c(c(1,0,0,1,1),
c(0,1,0,0,1),
c(1,0,1,1,1),
c(0,0,0,1,1),
c(0,0,0,0,1)),
dim = c(5, 5), dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("S1", "S2", "S3", "S4", "S5"))))
phi1%*%phi1
knitr::opts_chunk$set(echo = TRUE)
phi1 = t(array(c(c(1,0,1,1,1),
c(0,1,0,0,1),
c(0,0,1,1,1),
c(0,0,0,1,1),
c(0,0,0,0,1)),
dim = c(5, 5), dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("S1", "S2", "S3", "S4", "S5"))))
phi2 = t(array(c(c(1,0,0,1,1),
c(0,1,0,0,1),
c(1,0,1,1,1),
c(0,0,0,1,1),
c(0,0,0,0,1)),
dim = c(5, 5), dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("S1", "S2", "S3", "S4", "S5"))))
theta1 = array(dim = c(5,6), dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("E1", "E2", "E3", "E4", "E5","E6")))
theta1["S1",] = c(0,0,0,0,0,0)
theta1["S2",] = c(0,0,0,1,0,1)
theta1["S3",] = c(1,1,0,0,0,0)
theta1["S4",] = c(0,0,1,0,0,0)
theta1["S5",] = c(0,0,0,0,1,0)
theta2 = array(dim = c(5,6), dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("E1", "E2", "E3", "E4", "E5","E6")))
theta2["S1",] = c(1,1,0,0,0,0)
theta2["S2",] = c(0,0,0,1,0,1)
theta2["S3",] = c(0,0,0,0,0,0)
theta2["S4",] = c(0,0,1,0,0,0)
theta2["S5",] = c(0,0,0,0,1,0)
theta1 = array(dim = c(5,6), dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("E1", "E2", "E3", "E4", "E5","E6")))
theta1["S1",] = c(0,0,0,0,0,0)
theta1["S2",] = c(0,0,0,1,0,1)
theta1["S3",] = c(1,1,0,0,0,0)
theta1["S4",] = c(0,0,1,0,0,0)
theta1["S5",] = c(0,0,0,0,1,0)
theta2 = array(dim = c(5,6), dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("E1", "E2", "E3", "E4", "E5","E6")))
theta2["S1",] = c(1,1,0,0,0,0)
theta2["S2",] = c(0,0,0,1,0,1)
theta2["S3",] = c(0,0,0,0,0,0)
theta2["S4",] = c(0,0,1,0,0,0)
theta2["S5",] = c(0,0,0,0,1,0)
theta1
theta2
library(mnem)
#nem1 = nem(D1,marginal = TRUE,fpfn = c(0.05,0.01))
#nem1$score
#nem2 = nem(D2,marginal = TRUE,fpfn = c(0.05,0.01))
#nem2$score
###Not sure which one it is
scoreAdj(D1,adj = phi1,method="disc",marginal=TRUE,fpfn=c(0.05,0.01))$score
D1 = array(dim = c(6, 5), dimnames = list(c("E1", "E2", "E3", "E4", "E5","E6"),
c("S1", "S2", "S3", "S4", "S5")))
D1["E1",] = c(1,0,1,0,0)
D1["E2",] = c(1,0,1,0,0)
D1["E3",] = c(1,0,1,1,0)
D1["E4",] = c(0,1,0,0,0)
D1["E5",] = c(1,1,1,1,0)
D1["E6",] = c(0,1,0,0,1)
D2 = array(dim = c(6, 5), dimnames = list(c("E1", "E2", "E3", "E4", "E5","E6"),
c("S1", "S2", "S3", "S4", "S5")))
D2["E1",] = c(1,0,1,0,0)
D2["E2",] = c(1,0,1,0,0)
D2["E3",] = c(1,0,1,1,0)
D2["E4",] = c(0,1,0,0,0)
D2["E5",] = c(1,1,1,1,0)
D2["E6",] = c(0,1,0,0,1)
D1
D2
F1 = phi1%*%theta1
F2 = phi2%*%theta2
print("F1")
F1
print("F2")
F2
theta1 = array(dim = c(5,6), dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("E1", "E2", "E3", "E4", "E5","E6")))
theta1["S1",] = c(0,0,0,0,0,0)
theta1["S2",] = c(0,0,0,1,0,1)
theta1["S3",] = c(1,1,0,0,0,0)
theta1["S4",] = c(0,0,1,0,0,0)
theta1["S5",] = c(0,0,0,0,1,0)
theta2 = array(dim = c(5,6), dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("E1", "E2", "E3", "E4", "E5","E6")))
theta2["S1",] = c(1,1,0,0,0,0)
theta2["S2",] = c(0,0,0,1,0,1)
theta2["S3",] = c(0,0,0,0,0,0)
theta2["S4",] = c(0,0,1,0,0,0)
theta2["S5",] = c(0,0,0,0,1,0)
theta1
theta2
library(mnem)
#nem1 = nem(D1,marginal = TRUE,fpfn = c(0.05,0.01))
#nem1$score
#nem2 = nem(D2,marginal = TRUE,fpfn = c(0.05,0.01))
#nem2$score
###Not sure which one it is
scoreAdj(D1,adj = phi1,method="disc",marginal=TRUE,fpfn=c(0.05,0.01))$score
scoreAdj(D2,adj = phi2,method="disc",marginal=TRUE,fpfn=c(0.05,0.01))$score
library(mnem)
nem1 = nem(D1,marginal = TRUE,fpfn = c(0.05,0.01))
nem1$score
nem2 = nem(D2,marginal = TRUE,fpfn = c(0.05,0.01))
nem2$score
###Not sure which one it is
scoreAdj(D1,adj = phi1,method="disc",marginal=TRUE,fpfn=c(0.05,0.01))$score
scoreAdj(D2,adj = phi2,method="disc",marginal=TRUE,fpfn=c(0.05,0.01))$score
mnem:::enumerate.models(c("S1","S2","S3","S4"),trans.close = FALSE)
mnem:::enumerate.models(c("S1","S2","S3","S4"),trans.close = TRUE)
mnem:::enumerate.models(c("S1","S2","S3","S4"),trans.close = FALSE)
W = mnem:::enumerate.models(c("S1","S2","S3","S4"),trans.close = FALSE)
W[1]
W[2]
W[[1]]
W[[2]]
W[[3]]
W$1
class(W)
unlist(W)
W
W[[1]]
W[[500]]
W[[2]]
w = mnem:::enumerate.models(c("S1","S2","S3","S4"),trans.close = FALSE)
s_uw = sum(u!=w)
u = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,1),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v1 = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,0),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v2 = t(array(c(c(1,0,0,0),
c(1,1,1,0),
c(1,0,1,0),
c(1,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
lambda = seq(0.1, 0.9, by=0.1)
w = mnem:::enumerate.models(c("S1","S2","S3","S4"),trans.close = FALSE)
s_uw = sum(u!=w)
s_uw = sum(u!=w[[:]])
for(i in 1:dim(w)){
s_uw = sum(u!=w[[i]])
}
dim(w)
length(w)
for(i in 1:length(w)){
s_uw = sum(u!=w[[i]])
}
w = mnem:::enumerate.models(c("S1","S2","S3","S4"),trans.close = FALSE)
s_uw = array(dim = c(length(w), 1))
for(i in 1:length(w)){
s_uw[i] = sum(u!=w[[i]])
}
s_uw
power(2, c(2,4,6))
power <- function(x, y) sign(x) * abs(x)^y
power(0.1,s_uw)
power(0.1,s_uw)[1:20]
s_uw[1:20]
## not sure if the enumerate has to be used and how?
u = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,1),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v1 = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,0),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v2 = t(array(c(c(1,0,0,0),
c(1,1,1,0),
c(1,0,1,0),
c(1,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
lambda = seq(0.1, 0.9, by=0.1)
s_uv1 = sum(u!=v1)
s_uv2 = sum(u!=v2)
w = mnem:::enumerate.models(c("S1","S2","S3","S4"),trans.close = FALSE)
s_uw = array(dim = c(length(w), 1))
for(i in 1:length(w)){
s_uw[i] = sum(u!=w[[i]])
}
power <- function(x, y) sign(x) * abs(x)^y
T = array(dim = c(9,2), dimnames = list(lambda,c("v1", "v2")))
C = array(dim = c(9,1), dimnames = list(lambda,c("C")))
for(i in lambda){
C[as.character(i),] = sum(power((1-i),s_uw)*i)
T[as.character(i),"v1"] = (1/C[as.character(i),])*((1-i)^s_uv1)*i
T[as.character(i),"v2"] = (1/C[as.character(i),])*((1-i)^s_uv2)*i
}
T
library(reshape2)
library(ggplot2)
library(RColorBrewer)
data = data.frame(melt(T))
colnames(data)<-c("lambda","v","T")
plot<-ggplot(data,aes(x=lambda,y=T,color=v))+
geom_point()+
theme_classic()+
ylab("Transition probaility")+
labs(title="Transition probabilities as a function of lambda")
plot
C
phi_F1 = array(dim = c(2,2), dimnames = list(c("S1","S2"),
c("S1","S2")))
phi_F1["S1",] = c(1,1)
phi_F1["S2",] = c(0,1)
phi_F2 = array(dim = c(2,2), dimnames = list(c("S1","S2"),
c("S1","S2")))
phi_F2["S1",] = c(1,0)
phi_F2["S2",] = c(1,1)
theta_F1 = array(dim = c(2,2), dimnames = list(c("S1","S2"),
c("E1","E2")))
theta_F1["S1",] = c(1,0)
theta_F1["S2",] = c(0,1)
theta_F2 = array(dim = c(2,2), dimnames = list(c("S1","S2"),
c("E1","E2")))
theta_F2["S1",] = c(0,1)
theta_F2["S2",] = c(1,0)
EEP_F1 = t(t(rho)%*%phi_F1%*%theta_F1)
rho = array(dim = c(2,4), dimnames = list(c("S1","S2"),
c("C1", "C2", "C3", "C4")))
rho["S1",] = c(1,0,1,0)
rho["S2",] = c(0,1,1,1)
rho
phi_F1 = array(dim = c(2,2), dimnames = list(c("S1","S2"),
c("S1","S2")))
phi_F1["S1",] = c(1,1)
phi_F1["S2",] = c(0,1)
phi_F2 = array(dim = c(2,2), dimnames = list(c("S1","S2"),
c("S1","S2")))
phi_F2["S1",] = c(1,0)
phi_F2["S2",] = c(1,1)
theta_F1 = array(dim = c(2,2), dimnames = list(c("S1","S2"),
c("E1","E2")))
theta_F1["S1",] = c(1,0)
theta_F1["S2",] = c(0,1)
theta_F2 = array(dim = c(2,2), dimnames = list(c("S1","S2"),
c("E1","E2")))
theta_F2["S1",] = c(0,1)
theta_F2["S2",] = c(1,0)
EEP_F1 = t(t(rho)%*%phi_F1%*%theta_F1)
EEP_F1[EEP_F1>1] = 1
EEP_F2 = t(t(rho)%*%phi_F1%*%theta_F2)
EEP_F2[EEP_F2>1] = 1
print("Expected effect pattern of F1")
EEP_F1
print("Expected effect pattern of F2")
EEP_F2
R= cbind(EEP_F1[,1:2],EEP_F2[,3:4])
R[R==0] = -1
R
R= cbind(EEP_F1[,1:2],EEP_F2[,3:4])
R[R==0] = -1
R
L1 = t(EEP_F1)%*%R
L2 = t(EEP_F2)%*%R
L1
L2
pi = c(0.44,0.56)
gamma = array(dim = c(2,4), dimnames = list(c("F1","F2"),
c("C1", "C2", "C3", "C4")))
gamma["F1",] = pi[1]*diag(L1)/sum(pi[1]*diag(L1))
gamma["F2",] = pi[2]*diag(L2)/sum(pi[2]*diag(L2))
##Responsibilities should be in  [0,1]??
print("Responsibilities")
gamma
pi[1] = sum(gamma["F1",])/(sum(gamma["F1",])+sum(gamma["F2",]))
pi[2] = sum(gamma["F2",])/(sum(gamma["F1",])+sum(gamma["F2",]))
print("Updated mixture weights")
pi
L1 = t(EEP_F1)%*%R
L2 = t(EEP_F2)%*%R
print("L1")
L1
print("L2")
L2
pi = c(0.44,0.56)
gamma = array(dim = c(2,4), dimnames = list(c("F1","F2"),
c("C1", "C2", "C3", "C4")))
gamma["F1",] = pi[1]*diag(L1)/sum(pi[1]*diag(L1))
gamma["F2",] = pi[2]*diag(L2)/sum(pi[2]*diag(L2))
##Responsibilities should be in  [0,1]??
print("Responsibilities")
gamma
pi[1] = sum(gamma["F1",])/(sum(gamma["F1",])+sum(gamma["F2",]))
pi[2] = sum(gamma["F2",])/(sum(gamma["F1",])+sum(gamma["F2",]))
print("Updated mixture weights")
pi
L1 = t(EEP_F1)%*%R
L2 = t(EEP_F2)%*%R
print("L1")
L1
print("L2")
L2
pi = c(0.44,0.56)
gamma = array(dim = c(2,4), dimnames = list(c("F1","F2"),
c("C1", "C2", "C3", "C4")))
gamma["F1",] = pi[1]*expm(diag(L1))/sum(pi[1]*expm(diag(L1)))
install.packages("expm")
expm(diag(L1))
library("expm")
expm(diag(L1))
e
exp
library("expm")
L1 = t(EEP_F1)%*%R
L2 = t(EEP_F2)%*%R
print("L1")
L1
print("L2")
L2
pi = c(0.44,0.56)
gamma = array(dim = c(2,4), dimnames = list(c("F1","F2"),
c("C1", "C2", "C3", "C4")))
gamma["F1",] = pi[1]*exp(diag(L1))/sum(pi[1]*exp(diag(L1)))
gamma["F2",] = pi[2]*exp(diag(L2))/sum(pi[2]*exp(diag(L2)))
##Responsibilities should be in  [0,1]??
print("Responsibilities")
gamma
pi[1] = sum(gamma["F1",])/(sum(gamma["F1",])+sum(gamma["F2",]))
pi[2] = sum(gamma["F2",])/(sum(gamma["F1",])+sum(gamma["F2",]))
print("Updated mixture weights")
pi
library("expm")
L1 = t(EEP_F1)%*%R
L2 = t(EEP_F2)%*%R
print("L1")
L1
print("L2")
L2
pi = c(0.44,0.56)
gamma = array(dim = c(2,4), dimnames = list(c("F1","F2"),
c("C1", "C2", "C3", "C4")))
gamma["F1",] = pi[1]*exp(diag(L1))/sum(pi[1]*exp(diag(L1)))
gamma["F2",] = pi[2]*exp(diag(L2))/sum(pi[2]*exp(diag(L2)))
##Responsibilities should be in  [0,1]??
print("Responsibilities")
gamma
pi[1] = sum(gamma["F1",])/(sum(gamma["F1",])+sum(gamma["F2",]))
pi[2] = sum(gamma["F2",])/(sum(gamma["F1",])+sum(gamma["F2",]))
print("Updated mixture weights")
pi
phi_F1
phi_F2
theta_F1
theta_F2
EEP_F1
EEP_F2
phi_F1 = array(dim = c(2,2), dimnames = list(c("S1","S2"),
c("S1","S2")))
phi_F1["S1",] = c(1,1)
phi_F1["S2",] = c(0,1)
phi_F2 = array(dim = c(2,2), dimnames = list(c("S1","S2"),
c("S1","S2")))
phi_F2["S1",] = c(1,0)
phi_F2["S2",] = c(1,1)
theta_F1 = array(dim = c(2,2), dimnames = list(c("S1","S2"),
c("E1","E2")))
theta_F1["S1",] = c(1,0)
theta_F1["S2",] = c(0,1)
theta_F2 = array(dim = c(2,2), dimnames = list(c("S1","S2"),
c("E1","E2")))
theta_F2["S1",] = c(0,1)
theta_F2["S2",] = c(1,0)
EEP_F1 = t(t(rho)%*%phi_F1%*%theta_F1)
EEP_F1[EEP_F1>1] = 1
EEP_F2 = t(t(rho)%*%phi_F2%*%theta_F2)
EEP_F2[EEP_F2>1] = 1
print("Expected effect pattern of F1")
EEP_F1
print("Expected effect pattern of F2")
EEP_F2
R= cbind(EEP_F1[,1:2],EEP_F2[,3:4])
R[R==0] = -1
R
library("expm")
L1 = t(EEP_F1)%*%R
L2 = t(EEP_F2)%*%R
print("L1")
L1
print("L2")
L2
pi = c(0.44,0.56)
gamma = array(dim = c(2,4), dimnames = list(c("F1","F2"),
c("C1", "C2", "C3", "C4")))
gamma["F1",] = pi[1]*exp(diag(L1))/sum(pi[1]*exp(diag(L1)))
gamma["F2",] = pi[2]*exp(diag(L2))/sum(pi[2]*exp(diag(L2)))
##Responsibilities should be in  [0,1]??
print("Responsibilities")
gamma
pi[1] = sum(gamma["F1",])/(sum(gamma["F1",])+sum(gamma["F2",]))
pi[2] = sum(gamma["F2",])/(sum(gamma["F1",])+sum(gamma["F2",]))
print("Updated mixture weights")
pi
EEP_F2
L1
L2
library("expm")
L1 = t(EEP_F1)%*%R
L2 = t(EEP_F2)%*%R
print("L1")
L1
print("L2")
L2
pi = c(0.44,0.56)
gamma = array(dim = c(2,4), dimnames = list(c("F1","F2"),
c("C1", "C2", "C3", "C4")))
gamma["F1",] = pi[1]*exp(diag(L1))/(pi[1]*exp(diag(L1))+pi[2]*exp(diag(L2)))
gamma["F2",] = pi[2]*exp(diag(L2))/(pi[2]*exp(diag(L2))+pi[1]*exp(diag(L1)))
##Responsibilities should be in  [0,1]??
print("Responsibilities")
gamma
pi[1] = sum(gamma["F1",])/(sum(gamma["F1",])+sum(gamma["F2",]))
pi[2] = sum(gamma["F2",])/(sum(gamma["F1",])+sum(gamma["F2",]))
print("Updated mixture weights")
pi
pi
library("expm")
L1 = t(EEP_F1)%*%R
L2 = t(EEP_F2)%*%R
print("L1")
L1
print("L2")
L2
pi = c(0.32,0.68)
gamma = array(dim = c(2,4), dimnames = list(c("F1","F2"),
c("C1", "C2", "C3", "C4")))
gamma["F1",] = pi[1]*exp(diag(L1))/(pi[1]*exp(diag(L1))+pi[2]*exp(diag(L2)))
gamma["F2",] = pi[2]*exp(diag(L2))/(pi[2]*exp(diag(L2))+pi[1]*exp(diag(L1)))
##Responsibilities should be in  [0,1]??
print("Responsibilities")
gamma
pi[1] = sum(gamma["F1",])/(sum(gamma["F1",])+sum(gamma["F2",]))
pi[2] = sum(gamma["F2",])/(sum(gamma["F1",])+sum(gamma["F2",]))
print("Updated mixture weights")
pi
library("expm")
L1 = t(EEP_F1)%*%R
L2 = t(EEP_F2)%*%R
print("L1")
L1
print("L2")
L2
pi = c(0.44,0.56)
gamma = array(dim = c(2,4), dimnames = list(c("F1","F2"),
c("C1", "C2", "C3", "C4")))
gamma["F1",] = pi[1]*exp(diag(L1))/(pi[1]*exp(diag(L1))+pi[2]*exp(diag(L2)))
gamma["F2",] = pi[2]*exp(diag(L2))/(pi[2]*exp(diag(L2))+pi[1]*exp(diag(L1)))
##Responsibilities should be in  [0,1]??
print("Responsibilities")
gamma
pi[1] = sum(gamma["F1",])/(sum(gamma["F1",])+sum(gamma["F2",]))
pi[2] = sum(gamma["F2",])/(sum(gamma["F1",])+sum(gamma["F2",]))
print("Updated mixture weights")
pi
