0, 0, 0, 0, 1, 0),
ncol = 6,
nrow = 5,
byrow = TRUE)
theta_b = matrix(data = c(0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 1,
1, 1, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 1, 0),
ncol = 6,
nrow = 5,
byrow = TRUE)
# F_a
phi_a %*% theta_a
# F_b
phi_b %*% theta_b
phi_a = matrix(data = c(0, 1, 1, 1, 1,
0, 0, 0, 0, 1,
0, 0, 0, 1, 1,
0, 0, 0, 0, 1,
0, 0, 0, 0, 0),
ncol = 5,
nrow = 5,
byrow = TRUE,
dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("S1", "S2", "S3", "S4", "S5")))
phi_b = matrix(data = c(0, 1, 0, 1, 1,
0, 0, 0, 0, 1,
1, 0, 0, 1, 1,
0, 0, 0, 0, 1,
0, 0, 0, 0, 0),
ncol = 5,
nrow = 5,
byrow = TRUE,
dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("S1", "S2", "S3", "S4", "S5")))
theta_a = matrix(data = c(1, 1, 0, 0, 0, 0,
0, 0, 0, 1, 0, 1,
0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 1, 0),
ncol = 6,
nrow = 5,
byrow = TRUE,
dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("E1", "E2", "E3", "E4", "E5","E6")))
theta_b = matrix(data = c(0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 1,
1, 1, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 1, 0),
ncol = 6,
nrow = 5,
byrow = TRUE,
dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("E1", "E2", "E3", "E4", "E5","E6")))
# F_a
phi_a %*% theta_a
# F_b
phi_b %*% theta_b
phi_a = matrix(data = c(0, 0, 1, 1, 1,
0, 0, 0, 0, 1,
0, 0, 0, 1, 1,
0, 0, 0, 0, 1,
0, 0, 0, 0, 0),
ncol = 5,
nrow = 5,
byrow = TRUE,
dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("S1", "S2", "S3", "S4", "S5")))
phi_b = matrix(data = c(0, 0, 0, 1, 1,
0, 0, 0, 0, 1,
1, 0, 0, 1, 1,
0, 0, 0, 0, 1,
0, 0, 0, 0, 0),
ncol = 5,
nrow = 5,
byrow = TRUE,
dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("S1", "S2", "S3", "S4", "S5")))
theta_a = matrix(data = c(1, 1, 0, 0, 0, 0,
0, 0, 0, 1, 0, 1,
0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 1, 0),
ncol = 6,
nrow = 5,
byrow = TRUE,
dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("E1", "E2", "E3", "E4", "E5","E6")))
theta_b = matrix(data = c(0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 1,
1, 1, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 1, 0),
ncol = 6,
nrow = 5,
byrow = TRUE,
dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("E1", "E2", "E3", "E4", "E5","E6")))
# F_a
phi_a %*% theta_a
# F_b
phi_b %*% theta_b
install.packages(mnem)
install.packages('mnem')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("mnem")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("mnem")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("mnem")
library(nem)
library(mnem)
scoreAdj(D = D1, adj = phi_a, method="disc", marginal=TRUE, fpfn=c(0.05,0.01))
scoreAdj(D = D1, adj = phi_a, method="disc", marginal=TRUE, fpfn=c(0.05,0.01))
?scoreAdj
library(mnem)
scoreAdj(D = D1, adj = phi_a, method="disc", fpfn=c(0.05,0.01))
D1 = array(dim = c(6, 5), dimnames = list(c("E1", "E2", "E3", "E4", "E5","E6"),
c("S1", "S2", "S3", "S4", "S5")))
D1["E1",] = c(1,0,1,0,0)
D1["E2",] = c(1,0,1,0,0)
D1["E3",] = c(1,0,1,1,0)
D1["E4",] = c(0,1,0,0,0)
D1["E5",] = c(1,1,1,1,0)
D1["E6",] = c(0,1,0,0,1)
D2 = array(dim = c(6, 5), dimnames = list(c("E1", "E2", "E3", "E4", "E5","E6"),
c("S1", "S2", "S3", "S4", "S5")))
D2["E1",] = c(1,0,1,0,0)
D2["E2",] = c(1,0,1,0,0)
D2["E3",] = c(1,0,1,1,0)
D2["E4",] = c(0,1,0,0,0)
D2["E5",] = c(1,1,1,1,0)
D2["E6",] = c(0,1,0,0,1)
D1
D2
library(mnem)
scoreAdj(D = D1, adj = phi_a, method="disc", fpfn=c(0.05,0.01))
scoreAdj(D = D2, adj = phi_b, method="disc", fpfn=c(0.05,0.01))
library(mnem)
scoreAdj(D = D1, adj = phi_a, method="disc", fpfn=c(0.05,0.01))$score
scoreAdj(D = D2, adj = phi_b, method="disc", fpfn=c(0.05,0.01))$score
?mnem:::enumerate.models
??mnem:::enumerate.models
??enumerate.models
0.5^0.1
0.5^0.01
0.5^0.001
0.00001^10
## not sure if the enumerate has to be used and how?
u = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,1),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
u
## not sure if the enumerate has to be used and how?
u = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,1),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v1 = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,0),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v2 = t(array(c(c(1,0,0,0),
c(1,1,1,0),
c(1,0,1,0),
c(1,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
lambda = seq(0.1, 0.9, by=0.1)
s_uv1 = sum(u!=v1)
s_uv2 = sum(u!=v2)
Trn = array(dim = c(9,2), dimnames = list(lambda,c("v1", "v2")))
C = array(dim = c(9,1), dimnames = list(lambda,c("C")))
for(i in lambda){
C[as.character(i),] = ((1-i)^s_uv1)*i + ((1-i)^s_uv2)*i
Trn[as.character(i),"v1"] = (1/C[as.character(i),])*((1-i)^s_uv1)*i
Trn[as.character(i),"v2"] = (1/C[as.character(i),])*((1-i)^s_uv2)*i
}
Trn
## not sure if the enumerate has to be used and how?
u = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,1),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v1 = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,0),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v2 = t(array(c(c(1,0,0,0),
c(1,1,1,0),
c(1,0,1,0),
c(1,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
lambda = seq(0.1, 0.9, by=0.1)
s_uv1 = sum(u!=v1)
s_uv2 = sum(u!=v2)
Trn = array(dim = c(9,2), dimnames = list(lambda,c("v1", "v2")))
C = array(dim = c(9,1), dimnames = list(lambda,c("C")))
for(i in lambda){
C[as.character(i),] = ((1-i)^s_uv1) + ((1-i)^s_uv2)
Trn[as.character(i),"v1"] = (1/C[as.character(i),])*((1-i)^s_uv1)
Trn[as.character(i),"v2"] = (1/C[as.character(i),])*((1-i)^s_uv2)
}
Trn
mnem:::enumerate.models(4,name=1:4,trans.close = TRUE,verbose=FALSE)
u != mnem:::enumerate.models(4, name=1:4, trans.close = TRUE, verbose=FALSE)
models = mnem:::enumerate.models(4, name=1:4, trans.close = TRUE, verbose=FALSE)
modles[1:4]
models[1:4]
u != models[1:4]
unlist(models[1:3])
for (model in modles[1:3]) {
model
}
for (model in models[1:3]) {
model
}
for (model in models[1:3]) {
print(model)
}
model[1]
model[[1]]
models[[1]]
models[1]
u
u != models[1]
models = mnem:::enumerate.models(4,
name=c("S1", "S2", "S3", "S4"),
trans.close = TRUE,
verbose=FALSE)
u != models[1]
models[1]
unlist(models[1])
models[[1]]
u != models[[1]]
sum(u != models[[1]])
lenght(models)
length(models)
modles[0:3]
models[0:3]
for (model in models) {
C = C + sum(u != model)
}
C
C = 0
for (model in models) {
C = C + sum(u != model)
}
C
u = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,1),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v1 = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,0),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v2 = t(array(c(c(1,0,0,0),
c(1,1,1,0),
c(1,0,1,0),
c(1,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
lambda = seq(0.1, 0.9, by=0.1)
s_uv1 = sum(u!=v1)
s_uv2 = sum(u!=v2)
Trn = array(dim = c(9,2), dimnames = list(lambda,c("v1", "v2")))
models = mnem:::enumerate.models(4,
name=c("S1", "S2", "S3", "S4"),
trans.close = TRUE,
verbose=FALSE)
for(lambda in lambdas){
C = 0
for (model in models) {
C = C + (1-lambda)^sum(u != model)
}
C = C
Trn[as.character(lambda),"v1"] = (1/C)*((1-lambda)^s_uv1)
Trn[as.character(lambda),"v2"] = (1/C)*((1-lambda)^s_uv2)
}
u = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,1),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v1 = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,0),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v2 = t(array(c(c(1,0,0,0),
c(1,1,1,0),
c(1,0,1,0),
c(1,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
lambdas = seq(0.1, 0.9, by=0.1)
s_uv1 = sum(u!=v1)
s_uv2 = sum(u!=v2)
Trn = array(dim = c(9,2), dimnames = list(lambda,c("v1", "v2")))
models = mnem:::enumerate.models(4,
name=c("S1", "S2", "S3", "S4"),
trans.close = TRUE,
verbose=FALSE)
for(lambda in lambdas){
C = 0
for (model in models) {
C = C + (1-lambda)^sum(u != model)
}
C = C
Trn[as.character(lambda),"v1"] = (1/C)*((1-lambda)^s_uv1)
Trn[as.character(lambda),"v2"] = (1/C)*((1-lambda)^s_uv2)
}
Trn
library(reshape2)
library(ggplot2)
library(RColorBrewer)
data = data.frame(melt(T))
colnames(data)<-c("lambda","v","T")
library(reshape2)
library(ggplot2)
library(RColorBrewer)
data = data.frame(melt(Trn))
colnames(data)<-c("lambda","v","T")
plot<-ggplot(data,aes(x=lambda,y=T,color=v))+
geom_point()+
theme_classic()+
ylab("Transition probaility")+
labs(title="Transition probabilities as a function of lambda")
plot
phi_a = matrix(data = c(1, 0, 1, 1, 1,
0, 1, 0, 0, 1,
0, 0, 1, 1, 1,
0, 0, 0, 1, 1,
0, 0, 0, 0, 1),
ncol = 5,
nrow = 5,
byrow = TRUE,
dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("S1", "S2", "S3", "S4", "S5")))
phi_b = matrix(data = c(1, 0, 0, 1, 1,
0, 1, 0, 0, 1,
1, 0, 1, 1, 1,
0, 0, 0, 1, 1,
0, 0, 0, 0, 1),
ncol = 5,
nrow = 5,
byrow = TRUE,
dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("S1", "S2", "S3", "S4", "S5")))
theta_a = matrix(data = c(1, 1, 0, 0, 0, 0,
0, 0, 0, 1, 0, 1,
0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 1, 0),
ncol = 6,
nrow = 5,
byrow = TRUE,
dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("E1", "E2", "E3", "E4", "E5","E6")))
theta_b = matrix(data = c(0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 1,
1, 1, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 1, 0),
ncol = 6,
nrow = 5,
byrow = TRUE,
dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("E1", "E2", "E3", "E4", "E5","E6")))
# F_a
phi_a %*% theta_a
# F_b
phi_b %*% theta_b
u = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,1),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v1 = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,0),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v2 = t(array(c(c(1,0,0,0),
c(1,1,1,0),
c(1,0,1,0),
c(1,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
lambdas = seq(0.1, 0.9, by=0.1)
s_uv1 = sum(u!=v1)
s_uv2 = sum(u!=v2)
Trn = array(dim = c(9,2), dimnames = list(lambdas,c("v1", "v2")))
models = mnem:::enumerate.models(4,
name=c("S1", "S2", "S3", "S4"),
trans.close = TRUE,
verbose=FALSE)
for(lambda in lambdas){
C = 0
for (model in models) {
C = C + (1-lambda)^sum(u != model)
}
C = C
Trn[as.character(lambda),"v1"] = (1/C)*((1-lambda)^s_uv1)
Trn[as.character(lambda),"v2"] = (1/C)*((1-lambda)^s_uv2)
}
Trn
scoreAdj(D = D1, adj = phi_a, method="disc", marginal = TRUE,  fpfn=c(0.05,0.01))$score
scoreAdj(D1,adj = phi_a,method="disc",marginal=TRUE,fpfn=c(0.05,0.01))$score
library(mnem)
scoreAdj(D = D1, adj = phi_a, method="disc", fpfn=c(0.05,0.01))$score
scoreAdj(D = D2, adj = phi_b, method="disc", fpfn=c(0.05,0.01))$score
t(array(c(c(1,0,1,1,1),
c(0,1,0,0,1),
c(0,0,1,1,1),
c(0,0,0,1,1),
c(0,0,0,0,1)),
dim = c(5, 5), dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("S1", "S2", "S3", "S4", "S5"))))
phi_a
phi2 = t(array(c(c(1,0,0,1,1),
c(0,1,0,0,1),
c(1,0,1,1,1),
c(0,0,0,1,1),
c(0,0,0,0,1)),
dim = c(5, 5), dimnames = list(c("S1", "S2", "S3", "S4", "S5"),
c("S1", "S2", "S3", "S4", "S5"))))
phi2
phi_b
?scoreAdj
library(mnem)
#nem1 = nem(D1,marginal = TRUE,fpfn = c(0.05,0.01))
#nem1$score
#nem2 = nem(D2,marginal = TRUE,fpfn = c(0.05,0.01))
#nem2$score
###Not sure which one it is
scoreAdj(D1,adj = phi1,method="disc",marginal=TRUE,fpfn=c(0.05,0.01))$score
library(mnem)
#nem1 = nem(D1,marginal = TRUE,fpfn = c(0.05,0.01))
#nem1$score
#nem2 = nem(D2,marginal = TRUE,fpfn = c(0.05,0.01))
#nem2$score
###Not sure which one it is
scoreAdj(D1,adj = phi1,method="disc",fpfn=c(0.05,0.01))$score
scoreAdj(D2,adj = phi2,method="disc",fpfn=c(0.05,0.01))$score
u = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,1),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v1 = t(array(c(c(1,1,1,0),
c(0,1,1,1),
c(0,0,1,0),
c(0,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
v2 = t(array(c(c(1,0,0,0),
c(1,1,1,0),
c(1,0,1,0),
c(1,0,0,1)),
dim = c(4, 4), dimnames = list(c("S1", "S2", "S3", "S4"),
c("S1", "S2", "S3", "S4"))))
lambdas = seq(0.1, 0.9, by=0.1)
s_uv1 = sum(u!=v1)
s_uv2 = sum(u!=v2)
Trn = array(dim = c(9,2), dimnames = list(lambdas,c("v1", "v2")))
models = mnem:::enumerate.models(4,
name=c("S1", "S2", "S3", "S4"),
trans.close = FALSE,
verbose=FALSE)
for(lambda in lambdas){
C = 0
for (model in models) {
C = C + (1-lambda)^sum(u != model)
}
Trn[as.character(lambda),"v1"] = (1/C)*(1-lambda)^s_uv1
Trn[as.character(lambda),"v2"] = (1/C)*(1-lambda)^s_uv2
}
Trn
